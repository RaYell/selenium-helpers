namespace Selenium.WebDriver.Extensions
{
    internal static partial class Suppress
    {
        public const string CC0001 = "CC0001:AlwaysUseVarAnalyzer_NonPrimitives";
        public const string CC0002 = "CC0002:ArgumentExceptionAnalyzer";
        public const string CC0003 = "CC0003:CatchEmptyAnalyzer";
        public const string CC0004 = "CC0004:EmptyCatchBlockAnalyzer";
        public const string CC0005 = "CC0005:EmptyObjectInitializerAnalyzer";
        public const string CC0006 = "CC0006:ForInArrayAnalyzer";
        public const string CC0007 = "CC0007:IfReturnTrueAnalyzer";
        public const string CC0008 = "CC0008:ObjectInitializerAnalyzer (local declaration)";
        public const string CC0009 = "CC0009:ObjectInitializerAnalyzer (assignment)";
        public const string CC0010 = "CC0010:RegexAnalyzer";
        public const string CC0011 = "CC0011:RemoveWhereWhenItIsPossibleAnalyzer";
        public const string CC0012 = "CC0012:RethrowExceptionAnalyzer";
        public const string CC0013 = "CC0013:TernaryOperatorAnalyzer (return)";
        public const string CC0014 = "CC0014:TernaryOperatorAnalyzer (assignment)";
        public const string CC0015 = "CC0015:UnnecessaryParenthesisAnalyzer";
        public const string CC0017 = "CC0017:AutoPropertyAnalyzer";
        public const string CC0018 = "CC0018:ExistenceOperatorAnalyzer";
        public const string CC0019 = "CC0019:ConvertToSwitchAnalyzer";
        public const string CC0020 = "CC0020:Convert Lambda to Method Group";
        public const string CC0021 = "CC0021:NameOfAnalyzer";
        public const string CC0022 = "CC0022:IDisposable not assigned to a field is not being disposed";
        public const string CC0023 = "CC0023:SealedAttributeAnalyzer";
        public const string CC0024 = "CC0024:StaticConstructorExceptionAnalyzer";
        public const string CC0025 = "CC0025:EmptyFinalizerAnalyzer";
        public const string CC0026 = "CC0026:CallExtensionMethodAsExtensionAnalyzer";
        public const string CC0027 = "CC0027:Implement IEquatable<T> on Value Types";
        public const string CC0028 = "CC0028:Change from as operator to direct cast";
        public const string CC0029 = "CC0029:DisposablesShouldCallSuppressFinalizeAnalyzer";
        public const string CC0030 = "CC0030:MakeLocalVariableConstWhenItIsPossibleAnalyzer";
        public const string CC0031 = "CC0031:UseInvokeMethodToFireEventAnalyzer";
        public const string CC0032 = "CC0032:DisposableFieldNotDisposedAnalyzer.Info";
        public const string CC0033 = "CC0033:DisposableFieldNotDisposedAnalyzer.Warning";
        public const string CC0034 = "CC0034:Supress assignment of default value";
        public const string CC0035 = "CC0035:Reorder class";
        public const string CC0036 = "CC0036:Improve double/float comparisons";
        public const string CC0037 = "CC0037:RemoveCommentedCodeAnalyzer";
        public const string CC0038 = "CC0038:ConvertToExpressionBodiedMemberAnalyzer";
        public const string CC0039 = "CC0039:StringBuilderInLoopAnalyzer";
        public const string CC0040 = "CC0040:Warning potential null in fields, variables and arguments";
        public const string CC0041 = "CC0041:Align Equals on Variable Assignment statements";
        public const string CC0042 = "CC0042:InvertForAnalyzer";
        public const string CC0043 = "CC0043:Not Any to All";
        public const string CC0044 = "CC0044:Excess parameters in methods";
        public const string CC0045 = "CC0045:StringRepresentationAnalyzer.RegularString";
        public const string CC0046 = "CC0046:StringRepresentationAnalyzer.VerbatimString";
        public const string CC0047 = "CC0047:PropertyPrivateSetAnalyzer";
        public const string CC0048 = "CC0048:StringFormatAnalyzer";
        public const string CC0049 = "CC0049:SimplifyRedundantBooleanComparisonsAnalyzer";
        public const string CC0050 = "CC0050:Convert loop to linq expression";
        public const string CC0051 = "CC0051:Remove async and return task directly";
        public const string CC0052 = "CC0052:ReadOnlyField";
        public const string CC0053 = "CC0053:ColorTranslator.FromHtml";
        public const string CC0054 = "CC0054:JsonConvert.DeserializeObject";
        public const string CC0055 = "CC0055:Unreachable code";
        public const string CC0056 = "CC0056:Check arguments in String.Format";
        public const string CC0057 = "CC0057:Remove unused parameters";
        public const string CC0058 = "CC0058:Encapsulate field as read-only or write-only";
        public const string CC0059 = "CC0059:Generate Equals() and GetHashCode() for reference types";
        public const string CC0060 = "CC0060:Abstract class ctors should not have public constructors";
        public const string CC0061 = "CC0061:If method returns a Task it should have the postfix Async";
        public const string CC0062 = "CC0062:Interfaces should start with an I";
        public const string CC0063 = "CC0063:Validate Uri from System.Uri";
        public const string CC0064 = "CC0064:Validate IPAddress.Parse from System.Net";
        public const string CC0065 = "CC0065:Remove trailling whitespace";
        public const string CC0066 = "CC0066:Remove trailling end of line";
        public const string CC0067 = "CC0067:Virtual method call in constructor";
        public const string CC0068 = "CC0068:Remove private method is never used in a class";
        public const string CC0069 = "CC0069:Forward cancellation token to awaited methods";
        public const string CC0070 = "CC0070:Use ConfigureAwait(false) on awaited task";
        public const string CC0071 = "CC0071:Introduce field from constructor";
        public const string CC0072 = "CC0072:If method does not return a Task it shouldn't end with Async";
        public const string CC0073 = "CC0073:Add braces to switch case";
        public const string CC0074 = "CC0074:ReadonlyFieldAnalyzer";
        public const string CC0075 = "CC0075:Merge nested if statements";
        public const string CC0076 = "CC0076:Split 'if' with '&&' condition into nested 'if'-statements";
        public const string CC0077 = "CC0077:async void should not be used";
        public const string CC0078 = "CC0078:Verifies if reference type parameters are null";
        public const string CC0079 = "CC0079:Convert numerical literal from decimal to hex and hex to decimal";
        public const string CC0080 = "CC0080:Change IIF to If to short circuit evaulations";
        public const string CC0081 = "CC0081:Use static Regex.IsMatch";
        public const string CC0082 = "CC0082:Compute Constant Value of an expression";
        public const string CC0083 = "CC0083:Add property to constructor";
        public const string CC0084 = "CC0084:Use String.Empty";
        public const string CC0085 = "CC0085:Convert '==' to 'Equals'";
        public const string CC0086 = "CC0086:Convert 'Equals' to '=='";
        public const string CC0087 = "CC0087:Invert if";
        public const string CC0088 = "CC0088:Use \"\" instead of String.Empty";
        public const string CC0089 = "CC0089:Remove Redundant Else Clause";
        public const string CC0090 = "CC0090:XmlDocumentationAnalyzer - Incorrect params";
        public const string CC0091 = "CC0091:Make method static if possible";
        public const string CC0092 = "CC0092:All to Not Any";
        public const string CC0093 = "CC0093:Remove virtual modifier if possible";
        public const string CC0094 = "CC0094:Seal member if possible";
        public const string CC0095 = "CC0095:ChangeConsoleWriteLineToStringInterpolation";
        public const string CC0096 = "CC0096:Extract class to a new file";
        public const string CC0097 = "CC0097:XmlDocumentationAnalyzer - Missing params";
        public const string CC0098 = "CC0098:Prefer Count to Count()";
        public const string CC0099 = "CC0099:Prefer Any to Count() > 0";
        public const string CC0100 = "CC0100:IEnumerable possibly being enumerated more than once";
        public const string CC0101 = "CC0101:Convert abstract class to interface";
        public const string CC0102 = "CC0102:Convert Interface to abstract class";
        public const string CC0104 = "CC0104:Convert to block bodied method from expression bodied method";
        public const string CC0105 = "CC0105:AlwaysUseVarAnalyzer_Primitives";
        public const string CC0106 = "CC0106:Create PropertyChangedEventArgs statically";
        public const string CC0107 = "CC0107:Convert anonymous delegate to lambda expression";
        public const string CC0108 = "CC0108:NameOfAnalyzer_External";
        public const string CC0109 = "CC0109:Implement interface and delegate calls to decorate";
        public const string CC0110 = "CC0110:Check consistency of optional parameter default value";
        public const string CC0111 = "CC0111:Check arguments in String.Format (Warning)";
        public const string CC0112 = "CC0112:Readonly reference field is never assigned and is used";
        public const string CC0113 = "CC0113:IsNullOrWhiteSpace or IsNullOrEmpty";
        public const string CC0114 = "CC0114:Convert assignment to function name to return statement";
        public const string CC0115 = "CC0115:Hoist common sub-expression";
        public const string CC0116 = "CC0116:Replace assignment to variable with increment of variable";
        public const string CC0117 = "CC0117:Remove @ from variables that are not keywords";
        public const string CC0118 = "CC0118:Remove Unnecessary ToString in String Concatenation";
        public const string CC0119 = "CC0119:If statement can be replaced by null coalescing operator";
        public const string CC0120 = "CC0120:Suggest Case Else for Select Case statements";
        public const string CC0121 = "CC0121:ReadOnlyField_ComplexValueTypes";
        public const string CC0122 = "CC0122:Replace Task.Result with await Task";
        public const string CC0123 = "CC0123:Rewrite a call using named arguments";
        public const string CC0124 = "CC0124:Replace if statement or operator with call to Math.Max";

        public const string CC0125 =
            "CC0125:Replace getter only properties with backing readonly field with getter-only auto-property";

        public const string CC0126 = "CC0126:Left and right side of assignment must not be the same entity";
    }
}
